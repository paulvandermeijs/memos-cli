/*
 * Memos API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum V1ReactionType {
    #[serde(rename = "TYPE_UNSPECIFIED")]
    TypeUnspecified,
    #[serde(rename = "THUMBS_UP")]
    ThumbsUp,
    #[serde(rename = "THUMBS_DOWN")]
    ThumbsDown,
    #[serde(rename = "HEART")]
    Heart,
    #[serde(rename = "FIRE")]
    Fire,
    #[serde(rename = "CLAPPING_HANDS")]
    ClappingHands,
    #[serde(rename = "LAUGH")]
    Laugh,
    #[serde(rename = "OK_HAND")]
    OkHand,
    #[serde(rename = "ROCKET")]
    Rocket,
    #[serde(rename = "EYES")]
    Eyes,
    #[serde(rename = "THINKING_FACE")]
    ThinkingFace,
    #[serde(rename = "CLOWN_FACE")]
    ClownFace,
    #[serde(rename = "QUESTION_MARK")]
    QuestionMark,

}

impl std::fmt::Display for V1ReactionType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::TypeUnspecified => write!(f, "TYPE_UNSPECIFIED"),
            Self::ThumbsUp => write!(f, "THUMBS_UP"),
            Self::ThumbsDown => write!(f, "THUMBS_DOWN"),
            Self::Heart => write!(f, "HEART"),
            Self::Fire => write!(f, "FIRE"),
            Self::ClappingHands => write!(f, "CLAPPING_HANDS"),
            Self::Laugh => write!(f, "LAUGH"),
            Self::OkHand => write!(f, "OK_HAND"),
            Self::Rocket => write!(f, "ROCKET"),
            Self::Eyes => write!(f, "EYES"),
            Self::ThinkingFace => write!(f, "THINKING_FACE"),
            Self::ClownFace => write!(f, "CLOWN_FACE"),
            Self::QuestionMark => write!(f, "QUESTION_MARK"),
        }
    }
}

impl Default for V1ReactionType {
    fn default() -> V1ReactionType {
        Self::TypeUnspecified
    }
}

