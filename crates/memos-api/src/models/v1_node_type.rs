/*
 * Memos API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1NodeType :  - LINE_BREAK: Block nodes.  - TEXT: Inline nodes.
///  - LINE_BREAK: Block nodes.  - TEXT: Inline nodes.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum V1NodeType {
    #[serde(rename = "NODE_UNSPECIFIED")]
    NodeUnspecified,
    #[serde(rename = "LINE_BREAK")]
    LineBreak,
    #[serde(rename = "PARAGRAPH")]
    Paragraph,
    #[serde(rename = "CODE_BLOCK")]
    CodeBlock,
    #[serde(rename = "HEADING")]
    Heading,
    #[serde(rename = "HORIZONTAL_RULE")]
    HorizontalRule,
    #[serde(rename = "BLOCKQUOTE")]
    Blockquote,
    #[serde(rename = "LIST")]
    List,
    #[serde(rename = "ORDERED_LIST_ITEM")]
    OrderedListItem,
    #[serde(rename = "UNORDERED_LIST")]
    UnorderedList,
    #[serde(rename = "UNORDERED_LIST_ITEM")]
    UnorderedListItem,
    #[serde(rename = "TASK_LIST_ITEM")]
    TaskListItem,
    #[serde(rename = "MATH_BLOCK")]
    MathBlock,
    #[serde(rename = "TABLE")]
    Table,
    #[serde(rename = "EMBEDDED_CONTENT")]
    EmbeddedContent,
    #[serde(rename = "TEXT")]
    Text,
    #[serde(rename = "BOLD")]
    Bold,
    #[serde(rename = "ITALIC")]
    Italic,
    #[serde(rename = "BOLD_ITALIC")]
    BoldItalic,
    #[serde(rename = "CODE")]
    Code,
    #[serde(rename = "IMAGE")]
    Image,
    #[serde(rename = "LINK")]
    Link,
    #[serde(rename = "AUTO_LINK")]
    AutoLink,
    #[serde(rename = "TAG")]
    Tag,
    #[serde(rename = "STRIKETHROUGH")]
    Strikethrough,
    #[serde(rename = "ESCAPING_CHARACTER")]
    EscapingCharacter,
    #[serde(rename = "MATH")]
    Math,
    #[serde(rename = "HIGHLIGHT")]
    Highlight,
    #[serde(rename = "SUBSCRIPT")]
    Subscript,
    #[serde(rename = "SUPERSCRIPT")]
    Superscript,
    #[serde(rename = "REFERENCED_CONTENT")]
    ReferencedContent,
    #[serde(rename = "SPOILER")]
    Spoiler,
    #[serde(rename = "HTML_ELEMENT")]
    HtmlElement,
    #[serde(rename = "TASK_LIST")]
    TaskList,

}

impl std::fmt::Display for V1NodeType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::NodeUnspecified => write!(f, "NODE_UNSPECIFIED"),
            Self::LineBreak => write!(f, "LINE_BREAK"),
            Self::Paragraph => write!(f, "PARAGRAPH"),
            Self::CodeBlock => write!(f, "CODE_BLOCK"),
            Self::Heading => write!(f, "HEADING"),
            Self::HorizontalRule => write!(f, "HORIZONTAL_RULE"),
            Self::Blockquote => write!(f, "BLOCKQUOTE"),
            Self::List => write!(f, "LIST"),
            Self::OrderedListItem => write!(f, "ORDERED_LIST_ITEM"),
            Self::UnorderedList => write!(f, "UNORDERED_LIST"),
            Self::UnorderedListItem => write!(f, "UNORDERED_LIST_ITEM"),
            Self::TaskListItem => write!(f, "TASK_LIST_ITEM"),
            Self::MathBlock => write!(f, "MATH_BLOCK"),
            Self::Table => write!(f, "TABLE"),
            Self::EmbeddedContent => write!(f, "EMBEDDED_CONTENT"),
            Self::Text => write!(f, "TEXT"),
            Self::Bold => write!(f, "BOLD"),
            Self::Italic => write!(f, "ITALIC"),
            Self::BoldItalic => write!(f, "BOLD_ITALIC"),
            Self::Code => write!(f, "CODE"),
            Self::Image => write!(f, "IMAGE"),
            Self::Link => write!(f, "LINK"),
            Self::AutoLink => write!(f, "AUTO_LINK"),
            Self::Tag => write!(f, "TAG"),
            Self::Strikethrough => write!(f, "STRIKETHROUGH"),
            Self::EscapingCharacter => write!(f, "ESCAPING_CHARACTER"),
            Self::Math => write!(f, "MATH"),
            Self::Highlight => write!(f, "HIGHLIGHT"),
            Self::Subscript => write!(f, "SUBSCRIPT"),
            Self::Superscript => write!(f, "SUPERSCRIPT"),
            Self::ReferencedContent => write!(f, "REFERENCED_CONTENT"),
            Self::Spoiler => write!(f, "SPOILER"),
            Self::HtmlElement => write!(f, "HTML_ELEMENT"),
            Self::TaskList => write!(f, "TASK_LIST"),
        }
    }
}

impl Default for V1NodeType {
    fn default() -> V1NodeType {
        Self::NodeUnspecified
    }
}

